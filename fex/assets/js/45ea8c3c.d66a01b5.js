(self.webpackChunkfex=self.webpackChunkfex||[]).push([[1475],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),a=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=a(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=a(t),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var a=2;a<i;a++)l[a]=t[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5711:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return a},toc:function(){return u},default:function(){return d}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),l=["components"],s={id:"concurrent-poll",title:"\u63a7\u5236\u5e76\u53d1\u8bf7\u6c42"},c=void 0,a={unversionedId:"interview/handwrittens/concurrent-poll",id:"interview/handwrittens/concurrent-poll",isDocsHomePage:!1,title:"\u63a7\u5236\u5e76\u53d1\u8bf7\u6c42",description:"\u5b9e\u73b0\u65b9\u5f0f\uff1a",source:"@site/docs/interview/handwrittens/\u63a7\u5236\u5e76\u53d1\u8bf7\u6c42.md",sourceDirName:"interview/handwrittens",slug:"/interview/handwrittens/concurrent-poll",permalink:"/fex/docs/interview/handwrittens/concurrent-poll",editUrl:"https://github.com/oxyzhg/fex/edit/main/docs/interview/handwrittens/\u63a7\u5236\u5e76\u53d1\u8bf7\u6c42.md",version:"current",frontMatter:{id:"concurrent-poll",title:"\u63a7\u5236\u5e76\u53d1\u8bf7\u6c42"},sidebar:"interview",previous:{title:"\u5b9e\u73b0 mergePromise",permalink:"/fex/docs/interview/handwrittens/merge-promise"},next:{title:"HTML \u76f8\u5173\u9898\u76ee\u603b\u7ed3",permalink:"/fex/docs/interview/questions/html"}},u=[],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u5b9e\u73b0\u65b9\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function concurrentPoll(promiseList, limit) {\n  const restPromiseList = Array.prototype.slice.call(promiseList);\n  const length = promiseList.length;\n  const result = [];\n\n  let handling = 0; // handling count\n  let resolved = 0; // resolved count\n\n  return new Promise((resolve, reject) => {\n    // Core method\n    // trigger request function\n    const run = () => {\n      if (restPromiseList.length === 0) return;\n\n      const index = length - restPromiseList.length;\n      const fn = restPromiseList.shift();\n\n      handling++;\n      Promise.resolve(fn())\n        .then((res) => {\n          result[index] = res; // save response data\n        })\n        .catch((err) => {\n          console.log(`error:`, err);\n        })\n        .finally(() => {\n          handling--;\n          resolved++;\n          if (resolved === length) {\n            resolve(result); // all settled, return result\n          } else {\n            run(); // recursion\n          }\n        });\n    };\n\n    for (let i = 0; i < limit; i++) {\n      run();\n    }\n  });\n}\n")),(0,i.kt)("p",null,"\u6d4b\u8bd5\u4ee3\u7801\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function mockHttpRequestList(delayList) {\n  return delayList.map((delay, index) => () =>\n    new Promise((resolve, reject) => {\n      console.log('run: ', index, delay);\n      setTimeout(() => {\n        console.log('resolved:', index, delay);\n        resolve(index);\n      }, delay);\n    })\n  );\n}\n\nconst httpRequestList = mockHttpRequestList([200, 20, 100, 300, 600, 30]);\n// test\nconcurrentPoll(httpRequestList, 3);\n")))}d.isMDXComponent=!0}}]);